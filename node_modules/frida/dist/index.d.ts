/// <reference types="node" />
import * as applicationModule from "./application";
import * as childModule from "./child";
import * as deviceManagerModule from "./device_manager";
import * as deviceModule from "./device";
import * as iconModule from "./icon";
import * as processModule from "./process";
import * as scriptModule from "./script";
import * as sessionModule from "./session";
import * as spawnModule from "./spawn";
export declare type DeviceManager = deviceManagerModule.DeviceManager;
export declare const DeviceManager: typeof deviceManagerModule.DeviceManager;
export declare type DeviceAddedHandler = deviceManagerModule.DeviceAddedHandler;
export declare type DeviceRemovedHandler = deviceManagerModule.DeviceRemovedHandler;
export declare type DevicesChangedHandler = deviceManagerModule.DevicesChangedHandler;
export declare type Device = deviceModule.Device;
export declare const Device: typeof deviceModule.Device;
export declare type SpawnAddedHandler = deviceModule.SpawnAddedHandler;
export declare type SpawnRemovedHandler = deviceModule.SpawnRemovedHandler;
export declare type ChildAddedHandler = deviceModule.ChildAddedHandler;
export declare type ChildRemovedHandler = deviceModule.ChildRemovedHandler;
export declare type OutputHandler = deviceModule.OutputHandler;
export declare type UninjectedHandler = deviceModule.UninjectedHandler;
export declare type DeviceLostHandler = deviceModule.DeviceLostHandler;
export declare type DeviceType = deviceModule.DeviceType;
export declare const DeviceType: typeof deviceModule.DeviceType;
export declare type SpawnOptions = deviceModule.SpawnOptions;
export declare type Stdio = deviceModule.Stdio;
export declare type Session = sessionModule.Session;
export declare const Session: typeof sessionModule.Session;
export declare type SessionDetachedHandler = sessionModule.SessionDetachedHandler;
export declare type SessionDetachReason = sessionModule.SessionDetachReason;
export declare const SessionDetachReason: typeof sessionModule.SessionDetachReason;
export declare type EnableDebuggerOptions = sessionModule.EnableDebuggerOptions;
export declare type Script = scriptModule.Script;
export declare const Script: typeof scriptModule.Script;
export declare type ScriptOptions = scriptModule.ScriptOptions;
export declare type ScriptRuntime = scriptModule.ScriptRuntime;
export declare const ScriptRuntime: typeof scriptModule.ScriptRuntime;
export declare type ScriptDestroyedHandler = scriptModule.ScriptDestroyedHandler;
export declare type ScriptMessageHandler = scriptModule.ScriptMessageHandler;
export declare type ScriptLogHandler = scriptModule.ScriptLogHandler;
export declare type Message = scriptModule.Message;
export declare type MessageType = scriptModule.MessageType;
export declare const MessageType: typeof scriptModule.MessageType;
export declare type SendMessage = scriptModule.SendMessage;
export declare type ErrorMessage = scriptModule.ErrorMessage;
export declare type ScriptExports = scriptModule.ScriptExports;
export declare type LogLevel = scriptModule.LogLevel;
export declare const LogLevel: typeof scriptModule.LogLevel;
export declare type Application = applicationModule.Application;
export declare type Process = processModule.Process;
export declare type Spawn = spawnModule.Spawn;
export declare type Child = childModule.Child;
export declare type Icon = iconModule.Icon;
export declare function spawn(program: string | string[], options?: SpawnOptions): Promise<number>;
export declare function resume(target: number | string): Promise<void>;
export declare function kill(target: number | string): Promise<void>;
export declare function attach(target: number | string): Promise<Session>;
export declare function injectLibraryFile(target: number | string, path: string, entrypoint: string, data: string): Promise<number>;
export declare function injectLibraryBlob(target: number | string, blob: Buffer, entrypoint: string, data: string): Promise<number>;
export declare function enumerateDevices(): Promise<Device[]>;
export declare function getDeviceManager(): DeviceManager;
export declare function getLocalDevice(): Promise<Device>;
export declare function getRemoteDevice(): Promise<Device>;
export declare function getUsbDevice(options?: GetDeviceOptions): Promise<Device>;
export declare function getDevice(id: string, options?: GetDeviceOptions): Promise<Device>;
export interface GetDeviceOptions {
    timeout?: number | null;
}
