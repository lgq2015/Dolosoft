/// <reference types="node" />
import { Application } from "./application";
import { Child } from "./child";
import { Crash } from "./crash";
import { Icon } from "./icon";
import { Process } from "./process";
import { Session } from "./session";
import { Signal } from "./signals";
import { Spawn } from "./spawn";
import { inspect } from "util";
export declare class Device {
    spawnAdded: Signal<SpawnAddedHandler>;
    spawnRemoved: Signal<SpawnRemovedHandler>;
    childAdded: Signal<ChildAddedHandler>;
    childRemoved: Signal<ChildRemovedHandler>;
    processCrashed: Signal<ProcessCrashedHandler>;
    output: Signal<OutputHandler>;
    uninjected: Signal<UninjectedHandler>;
    lost: Signal<DeviceLostHandler>;
    private impl;
    constructor(impl: any);
    readonly id: string;
    readonly name: string;
    readonly icon: Icon;
    readonly type: DeviceType;
    getFrontmostApplication(): Promise<Application | null>;
    enumerateApplications(): Promise<Application[]>;
    enumerateProcesses(): Promise<Process[]>;
    getProcess(name: string): Promise<Process>;
    enableSpawnGating(): Promise<void>;
    disableSpawnGating(): Promise<void>;
    enumeratePendingSpawn(): Promise<Spawn[]>;
    enumeratePendingChildren(): Promise<Child[]>;
    spawn(program: string | string[], options?: SpawnOptions): Promise<number>;
    input(target: number | string, data: Buffer): Promise<void>;
    resume(target: number | string): Promise<void>;
    kill(target: number | string): Promise<void>;
    attach(target: number | string): Promise<Session>;
    injectLibraryFile(target: number | string, path: string, entrypoint: string, data: string): Promise<number>;
    injectLibraryBlob(target: number | string, blob: Buffer, entrypoint: string, data: string): Promise<number>;
    private getPid;
    [inspect.custom](depth: any, options: any): string;
}
export declare type SpawnAddedHandler = (spawn: Spawn) => void;
export declare type SpawnRemovedHandler = (spawn: Spawn) => void;
export declare type ChildAddedHandler = (child: Child) => void;
export declare type ChildRemovedHandler = (child: Child) => void;
export declare type ProcessCrashedHandler = (crash: Crash) => void;
export declare type OutputHandler = (pid: number, fd: number, data: Buffer) => void;
export declare type UninjectedHandler = (id: number) => void;
export declare type DeviceLostHandler = () => void;
export declare enum DeviceType {
    Local = "local",
    Remote = "remote",
    Usb = "usb"
}
export interface SpawnOptions {
    argv?: string[];
    envp?: {
        [name: string]: string;
    };
    env?: {
        [name: string]: string;
    };
    cwd?: string;
    stdio?: Stdio;
    [name: string]: any;
}
export declare enum Stdio {
    Inherit = "inherit",
    Pipe = "pipe"
}
